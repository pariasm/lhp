.\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.40.4.
.TH PLAMBDA "1" "March 2016" "imscript" "User Commands"
.SH NAME
plambda \- evaluate an expression with images as variables
.SH SYNOPSIS
.B plambda
\fIa.png b.png c.png \fR... \fI"EXPRESSION" > output\fR
.br
.B plambda
\fIa.png b.png c.png \fR... \fI"EXPRESSION" -o output.png\fR
.br
.B plambda
\fI-c num1 num2 num3  \fR... \fI"EXPRESSION"\fR
.SH DESCRIPTION
Plambda evaluates an expression with images as variables.
.PP
The expression is written in reverse polish notation using common
operators and functions from `math.h'.  The variables appearing on the
expression are assigned to each input image in alphabetical order.
.PP
EXPRESSIONS:
.PP
A "plambda" expression is a sequence of tokens.
Tokens may be constants,
variables, or operators.  Constants and variables get their value
computed and pushed to the stack.  Operators pop values from the stack,
apply a function to them, and push back the results.
.PP
CONSTANTS: numeric constants written in scientific notation, and "pi"
.PP
OPERATORS: +, \-, *, ^, /, <, >, ==, and all the functions from math.h
.PP
LOGIC OPS: if, and, or, not
.PP
VARIABLES: anything not recognized as a constant or operator.  There
must be as many variables as input images, and they are assigned to
images in alphabetical order.  If there are no variables, the input
images are pushed to the stack.
.PP
All operators (unary, binary and ternary) are vectorizable.  Thus, you can
add a scalar to a vector, divide two vectors of the same size, and so on.
The semantics of each operation follows the principle of least surprise.
.PP
Some "sugar" is added to the language:
.SS "Predefined variables (always preceeded by a colon):"
.TP
:i
horizontal coordinate of the pixel
.TP
:j
vertical coordinate of the pixel
.TP
:w
width of the image
.TP
:h
heigth of the image
.TP
:n
number of pixels in the image
.TP
:x
relative horizontal coordinate of the pixel
.TP
:y
relative horizontal coordinate of the pixel
.TP
:r
relative distance to the center of the image
.TP
:t
relative angle from the center of the image
.TP
:I
horizontal coordinate of the pixel (centered)
.TP
:J
vertical coordinate of the pixel (centered)
.TP
:R
centered distance to the center
.TP
:L
minus squared centered distance to the center
.TP
:W
width of the image divided by 2*pi
.TP
:H
height of the image divided by 2*pi
.SS "Variable modifiers acting on regular variables:"
.TP
x
value of pixel (i,j)
.TP
x(0,0)
value of pixel (i,j)
.TP
x(1,0)
value of pixel (i+1,j)
.TP
x(0,\-1)
value of pixel (i,j\-1)
.TP
x[0]
value of first component of pixel (i,j)
.TP
x[1]
value of second component of pixel (i,j)
.TP
x(1,2)[3]
value of fourth component of pixel (i+1,j+2)
.SS "Comma modifiers (pre-defined local operators):"
.TP
a,x
x\-derivative of the image a
.TP
a,y
y\-derivative
.TP
a,xx
second x\-derivative
.TP
a,yy
second y\-derivative
.TP
a,xy
crossed second derivative
.TP
a,l
Laplacian
.TP
a,g
gradient
.TP
a,n
gradient norm
.TP
a,d
divergence
.TP
a,S
shadow operator
.TP
a,xf
x\-derivative, forward differences
.TP
a,xb
x\-derivative, backward differences
.TP
a,xc
x\-derivative, centered differences
.TP
a,xs
x\-derivative, sobel
.TP
a,xp
x\-derivative, prewitt
.IP
etc
.SS "Stack operators (allow direct manipulation of the stack):"
.TP
del
remove the value at the top of the stack (ATTTOS)
.TP
dup
duplicate the value ATTTOS
.TP
rot
swap the two values ATTTOS
.TP
split
split the vector ATTTOS into scalar components
.TP
join
join the components of two vectors ATTOTS
.TP
join3
join the components of three vectors ATTOTS
.TP
njoin
join the components of n vectors
.TP
halve
split an even\-sized vector ATTOTS into two equal\-sized parts
.SS "Magic variable modifiers (global data associated to each input image):"
.TP
x%i
value of the smallest sample of image x
.TP
x%a
value of the largest sample
.TP
x%v
average sample value
.TP
x%m
median sample value
.TP
x%s
sum of all samples
.TP
x%I
value of the smallest pixel (in euclidean norm)
.TP
x%A
value of the largest pixel
.TP
x%V
average pixel value
.TP
x%S
sum of all pixels
.TP
x%Y
component\-wise minimum of all pixels
.TP
x%E
component\-wise maximum of all pixels
.TP
x%qn
nth sample percentile
.TP
x%On
component\-wise nth percentile
.TP
x%Wn
component\-wise nth millionth part
.TP
x%0n
component\-wise nth order statistic
.TP
x%9n
component\-wise nth order statistic (from the right)
.SS "Random numbers (seeded by the SRAND environment variable):"
.TP
randu
push a random number with distribution Uniform(0,1)
.TP
randn
push a random number with distribution Normal(0,1)
.TP
randc
push a random number with distribution Cauchy(0,1)
.TP
randl
push a random number with distribution Laplace(0,1)
.TP
rande
push a random number with distribution Exponential(1)
.TP
randp
push a random number with distribution Pareto(1)
.TP
rand
push a random integer returned from rand(3)
.SS "Vectorial operations (acting over vectors of a certain length):"
.TP
topolar
convert a 2\-vector from cartesian to polar
.TP
frompolar
convert a 2\-vector from polar to cartesian
.TP
hsv2rgb
convert a 3\-vector from HSV to RGB
.TP
rgb2hsv
convert a 3\-vector from RGB to HSV
.TP
cprod
multiply two 2\-vectrs as complex numbers
.TP
mprod
multiply two 2\-vectrs as matrices (4\-vector = 2x2 matrix, etc)
.TP
vprod
vector product of two 3\-vectors
.TP
sprod
scalar product of two n\-vectors
.TP
mdet
determinant of a n\-matrix (a n*n\-vector)
.TP
mtrans
transpose of a matrix
.TP
mtrace
trace of a matrix
.TP
minv
inverse of a matrix
.SS "Registers (numbered from 1 to 9):"
.TP
>7
copy to register 7
.TP
<3
copy from register 3
.SH OPTIONS
.TP
\fB\-o\fR file
save output to named file
.TP
\fB\-c\fR
act as a symbolic calculator
.TP
\fB\-h\fR
display short help message
.TP
\fB\-\-help\fR
display longer help message
.SH EXAMPLES
.TP
plambda a.tiff b.tiff "x y +" > sum.tiff
Compute the sum of two images.
.TP
plambda \fB\-c\fR "1 atan 4 *"
Print pi
.TP
plambda \fB\-c\fR "355 113 /"
Print an approximation of pi
.SH AUTHOR
Written by Enric Meinhardt\-Llopis
.SH "REPORTING BUGS"
Report bugs to <enric.meinhardt@cmla.ens\-cachan.fr>.
